# Generated by Django 5.2 on 2025-04-28 23:51

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_choices_field.fields
import django_countries.fields
import django_extensions.db.fields
import neuronhub.apps.db.fields
import neuronhub.apps.posts.models.posts
import neuronhub.apps.posts.models.reviews
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("posts", "0004_post_recommended_to_groups_post_recommended_to_users"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ToolCompany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=511)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="name", unique=True
                    ),
                ),
                ("description", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.DomainNameValidator(accept_idna=False)
                        ],
                    ),
                ),
                ("country", django_countries.fields.CountryField(blank=True, max_length=2)),
                ("is_single_product", models.BooleanField(default=False)),
                ("crunchbase_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ToolCompanyOwnership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RemoveField(
            model_name="historicalpost",
            name="tool",
        ),
        migrations.RemoveField(
            model_name="post",
            name="tool",
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="content_private",
            field=neuronhub.apps.db.fields.MarkdownField(
                blank=True, help_text="Only for author"
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="crunchbase_url",
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="domain",
            field=models.CharField(blank=True, max_length=140),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="github_url",
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Can link to a PostTool (type=review), PostReview (type=comment), PostComment (type=comment)",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="review_experience_hours",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="review_importance",
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="review_rating",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Split on 5 categories: very dissatisfied, dissatisfied, neutral, satisfied, very satisfied",
                max_digits=5,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="review_usage_status",
            field=django_choices_field.fields.TextChoicesField(
                blank=True,
                choices=[
                    ("using", "Using"),
                    ("used", "Used"),
                    ("want_to_use", "Want to use"),
                    ("interested", "Interested"),
                    ("not_interested", "Not interested"),
                ],
                choices_enum=neuronhub.apps.posts.models.posts.UsageStatus,
                default=None,
                max_length=14,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="reviewed_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="type",
            field=django_choices_field.fields.TextChoicesField(
                choices=[
                    ("post", "Post"),
                    ("tool", "Tool"),
                    ("review", "Review"),
                    ("comment", "Comment"),
                ],
                choices_enum=neuronhub.apps.posts.models.posts.Post.Type,
                default="post",
                max_length=7,
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="url",
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name="post",
            name="comments",
            field=models.ManyToManyField(blank=True, to="posts.post"),
        ),
        migrations.AddField(
            model_name="post",
            name="content_private",
            field=neuronhub.apps.db.fields.MarkdownField(
                blank=True, help_text="Only for author"
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="crunchbase_url",
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name="post",
            name="domain",
            field=models.CharField(blank=True, max_length=140),
        ),
        migrations.AddField(
            model_name="post",
            name="github_url",
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name="post",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                help_text="Can link to a PostTool (type=review), PostReview (type=comment), PostComment (type=comment)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="review_experience_hours",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="post",
            name="review_importance",
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
        ),
        migrations.AddField(
            model_name="post",
            name="review_rating",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Split on 5 categories: very dissatisfied, dissatisfied, neutral, satisfied, very satisfied",
                max_digits=5,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="review_usage_status",
            field=django_choices_field.fields.TextChoicesField(
                blank=True,
                choices=[
                    ("using", "Using"),
                    ("used", "Used"),
                    ("want_to_use", "Want to use"),
                    ("interested", "Interested"),
                    ("not_interested", "Not interested"),
                ],
                choices_enum=neuronhub.apps.posts.models.posts.UsageStatus,
                default=None,
                max_length=14,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="reviewed_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="post",
            name="seen_by_users",
            field=models.ManyToManyField(
                blank=True,
                help_text="Marked 'seen' if present in browser's ViewBox for ~4 seconds",
                related_name="posts_seen",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="type",
            field=django_choices_field.fields.TextChoicesField(
                choices=[
                    ("post", "Post"),
                    ("tool", "Tool"),
                    ("review", "Review"),
                    ("comment", "Comment"),
                ],
                choices_enum=neuronhub.apps.posts.models.posts.Post.Type,
                default="post",
                max_length=7,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="url",
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name="posttagvote",
            name="is_changed_my_mind",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="posttagvote",
            name="is_important",
            field=models.BooleanField(
                blank=True,
                default=False,
                help_text="An important Tag is highly informative of its Tool - it's shown before all others and "
                "displays an icon",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="post",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="PostRelated",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_vote_positive", models.BooleanField(blank=True, null=True)),
                ("comment", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts_related",
                        related_query_name="post_related",
                        to="posts.post",
                    ),
                ),
                (
                    "post_related",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts_related_to",
                        related_query_name="post_related_to",
                        to="posts.post",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="post",
            name="alternatives",
            field=models.ManyToManyField(
                related_name="alternatives_to", through="posts.PostRelated", to="posts.post"
            ),
        ),
        migrations.CreateModel(
            name="PostTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tags",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tag_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="posts.posttag",
                    ),
                ),
            ],
            options={
                "unique_together": {("tag_parent", "name")},
            },
        ),
        migrations.AlterField(
            model_name="post",
            name="tags",
            field=models.ManyToManyField(blank=True, related_name="posts", to="posts.posttag"),
        ),
        migrations.AlterField(
            model_name="posttagvote",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="post_votes",
                to="posts.posttag",
            ),
        ),
        migrations.CreateModel(
            name="PostToolStatsGithub",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("stars", models.IntegerField()),
                ("kloc", models.IntegerField(blank=True, null=True)),
                ("forks", models.IntegerField(blank=True, null=True)),
                ("watchers", models.IntegerField(blank=True, null=True)),
                ("issues", models.IntegerField(blank=True, null=True)),
                ("pull_requests", models.IntegerField(blank=True, null=True)),
                (
                    "post",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stats_github",
                        to="posts.post",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="company",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="posts.toolcompany",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="company",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="posts.toolcompany",
            ),
        ),
        migrations.AddField(
            model_name="toolcompany",
            name="ownership",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="posts.toolcompanyownership",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalToolCompany",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=511)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="name"
                    ),
                ),
                ("description", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.DomainNameValidator(accept_idna=False)
                        ],
                    ),
                ),
                ("country", django_countries.fields.CountryField(blank=True, max_length=2)),
                ("is_single_product", models.BooleanField(default=False)),
                ("crunchbase_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ownership",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="posts.toolcompanyownership",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical tool company",
                "verbose_name_plural": "historical tool companys",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="PostReviewTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("value", "Value"),
                            ("ease_of_use", "Ease of use"),
                            ("a_must", "A must"),
                            ("expectations", "Expectations"),
                            ("stability", "Stability"),
                            ("controversial", "Controversial"),
                            ("privacy", "Privacy"),
                            ("open_source", "Open Source"),
                            ("quality", "Quality"),
                            ("changed_my_mind", "Changed my mind"),
                            ("read_fully", "Read fully"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.reviews.ReviewTagName,
                        max_length=15,
                    ),
                ),
                ("is_vote_positive", models.BooleanField(blank=True, null=True)),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_tags",
                        to="posts.post",
                    ),
                ),
            ],
            options={
                "unique_together": {("post", "name")},
            },
        ),
    ]
