# Generated by Django 5.2 on 2025-06-15 23:57

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("posts", "0001_initial"),
        ("users", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="historicalpost",
            name="author",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicaltoolcompany",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                help_text="<pre><code>\n    Can link to possible Post.Type, depending on your current Type:\n    - PostTool for Post|Review|Comment\n    - PostReview for Post|Tool\n    - PostComment for Post|Tool|Review|Comment\n\n</code></pre>\n",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="recommended_to_groups",
            field=models.ManyToManyField(
                blank=True, related_name="posts_recommended", to="users.userconnectiongroup"
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="recommended_to_users",
            field=models.ManyToManyField(
                blank=True, related_name="posts_recommended", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="seen_by_users",
            field=models.ManyToManyField(
                blank=True,
                help_text="Marked 'seen' if present in browser's ViewBox for ~4 seconds",
                related_name="posts_seen",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="users_library",
            field=models.ManyToManyField(
                blank=True, related_name="library", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="users_read_later",
            field=models.ManyToManyField(
                blank=True, related_name="read_later", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="visible_to_groups",
            field=models.ManyToManyField(
                blank=True, related_name="posts_visible", to="users.userconnectiongroup"
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="visible_to_users",
            field=models.ManyToManyField(
                blank=True, related_name="posts_visible", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="<pre><code>\n    Can link to possible Post.Type, depending on your current Type:\n    - PostTool for Post|Review|Comment\n    - PostReview for Post|Tool\n    - PostComment for Post|Tool|Review|Comment\n\n</code></pre>\n",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="postrelated",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="postrelated",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="posts_related",
                related_query_name="post_related",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="postrelated",
            name="post_related",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="posts_related_to",
                related_query_name="post_related_to",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="alternatives",
            field=models.ManyToManyField(
                related_name="alternatives_to", through="posts.PostRelated", to="posts.post"
            ),
        ),
        migrations.AddField(
            model_name="postreviewtag",
            name="post",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="review_tags",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="posttag",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tags",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="posttag",
            name="tag_parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="posts.posttag",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="tags",
            field=models.ManyToManyField(blank=True, related_name="posts", to="posts.posttag"),
        ),
        migrations.AddField(
            model_name="posttagvote",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="post_tag_votes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="posttagvote",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tag_votes",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="posttagvote",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="votes",
                to="posts.posttag",
            ),
        ),
        migrations.AddField(
            model_name="posttoolstatsgithub",
            name="post",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stats_github",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="postvote",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="post_votes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="postvote",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="votes",
                to="posts.post",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="company",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="posts.toolcompany",
            ),
        ),
        migrations.AddField(
            model_name="historicalpost",
            name="company",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="posts.toolcompany",
            ),
        ),
        migrations.AddField(
            model_name="toolcompany",
            name="ownership",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="posts.toolcompanyownership",
            ),
        ),
        migrations.AddField(
            model_name="historicaltoolcompany",
            name="ownership",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="posts.toolcompanyownership",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="postreviewtag",
            unique_together={("post", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="posttag",
            unique_together={("tag_parent", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="posttagvote",
            unique_together={("post", "tag", "author")},
        ),
        migrations.AlterUniqueTogether(
            name="postvote",
            unique_together={("post", "author")},
        ),
    ]
