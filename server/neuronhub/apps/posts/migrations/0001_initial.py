# Generated by Django 5.2 on 2025-06-15 23:57

import django.core.validators
import django.utils.timezone
import django_choices_field.fields
import django_countries.fields
import django_extensions.db.fields
import neuronhub.apps.anonymizer.fields
import neuronhub.apps.db.fields
import neuronhub.apps.posts.models.posts
import neuronhub.apps.posts.models.reviews
import neuronhub.apps.posts.models.types
import simple_history.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="HistoricalPost",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "type",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("post", "Post"),
                            ("tool", "Tool"),
                            ("review", "Review"),
                            ("comment", "Comment"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.types.PostTypeEnum,
                        default="post",
                        max_length=7,
                    ),
                ),
                (
                    "visibility",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("private", "Private"),
                            ("users_selected", "Users Selected"),
                            ("connection_groups_selected", "Connection Groups Selected"),
                            ("connections", "Connections"),
                            ("subscribers_paid", "Subscribers Paid"),
                            ("subscribers", "Subscribers"),
                            ("internal", "Internal"),
                            ("public", "Public"),
                        ],
                        choices_enum=neuronhub.apps.anonymizer.fields.Visibility,
                        default="private",
                        max_length=26,
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="title"
                    ),
                ),
                ("title", models.CharField(max_length=140)),
                ("content", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "content_private",
                    neuronhub.apps.db.fields.MarkdownField(
                        blank=True, help_text="Only for author"
                    ),
                ),
                ("source", models.CharField(blank=True, max_length=140)),
                (
                    "tool_type",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("program", "Program"),
                            ("material", "Material"),
                            ("saas", "Saas"),
                            ("app", "App"),
                            ("other", "Other"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.posts.Post.ToolType,
                        default=None,
                        max_length=8,
                        null=True,
                    ),
                ),
                ("domain", models.CharField(blank=True, max_length=140)),
                ("url", models.URLField(blank=True)),
                ("crunchbase_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
                ("review_content_pros", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                ("review_content_cons", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "review_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Split on 5 categories: very dissatisfied, dissatisfied, neutral, satisfied, very satisfied",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("review_experience_hours", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "review_importance",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
                ),
                (
                    "review_usage_status",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("using", "Using"),
                            ("used", "Used"),
                            ("want_to_use", "Want to use"),
                            ("interested", "Interested"),
                            ("not_interested", "Not interested"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.posts.UsageStatus,
                        default=None,
                        max_length=14,
                        null=True,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical post",
                "verbose_name_plural": "historical posts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalToolCompany",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=511)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="name"
                    ),
                ),
                ("description", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.DomainNameValidator(accept_idna=False)
                        ],
                    ),
                ),
                ("country", django_countries.fields.CountryField(blank=True, max_length=2)),
                ("is_single_product", models.BooleanField(default=False)),
                ("crunchbase_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical tool company",
                "verbose_name_plural": "historical tool companys",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("post", "Post"),
                            ("tool", "Tool"),
                            ("review", "Review"),
                            ("comment", "Comment"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.types.PostTypeEnum,
                        default="post",
                        max_length=7,
                    ),
                ),
                (
                    "visibility",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("private", "Private"),
                            ("users_selected", "Users Selected"),
                            ("connection_groups_selected", "Connection Groups Selected"),
                            ("connections", "Connections"),
                            ("subscribers_paid", "Subscribers Paid"),
                            ("subscribers", "Subscribers"),
                            ("internal", "Internal"),
                            ("public", "Public"),
                        ],
                        choices_enum=neuronhub.apps.anonymizer.fields.Visibility,
                        default="private",
                        max_length=26,
                    ),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="title", unique=True
                    ),
                ),
                ("title", models.CharField(max_length=140)),
                ("content", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "content_private",
                    neuronhub.apps.db.fields.MarkdownField(
                        blank=True, help_text="Only for author"
                    ),
                ),
                ("source", models.CharField(blank=True, max_length=140)),
                (
                    "tool_type",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("program", "Program"),
                            ("material", "Material"),
                            ("saas", "Saas"),
                            ("app", "App"),
                            ("other", "Other"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.posts.Post.ToolType,
                        default=None,
                        max_length=8,
                        null=True,
                    ),
                ),
                ("domain", models.CharField(blank=True, max_length=140)),
                ("url", models.URLField(blank=True)),
                ("crunchbase_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
                ("review_content_pros", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                ("review_content_cons", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "review_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Split on 5 categories: very dissatisfied, dissatisfied, neutral, satisfied, very satisfied",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("review_experience_hours", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "review_importance",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
                ),
                (
                    "review_usage_status",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("using", "Using"),
                            ("used", "Used"),
                            ("want_to_use", "Want to use"),
                            ("interested", "Interested"),
                            ("not_interested", "Not interested"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.posts.UsageStatus,
                        default=None,
                        max_length=14,
                        null=True,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostRelated",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_vote_positive", models.BooleanField(blank=True, null=True)),
                ("comment", neuronhub.apps.db.fields.MarkdownField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostReviewTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("value", "Value"),
                            ("ease_of_use", "Ease of use"),
                            ("a_must_have", "A must have"),
                            ("expectations", "Expectations"),
                            ("stability", "Stability"),
                            ("controversial", "Controversial"),
                            ("privacy", "Privacy"),
                            ("open_source", "Open Source"),
                            ("quality", "Quality"),
                            ("changed_my_mind", "Changed my mind"),
                            ("read_fully", "Read fully"),
                        ],
                        choices_enum=neuronhub.apps.posts.models.reviews.ReviewTagName,
                        max_length=15,
                    ),
                ),
                ("is_vote_positive", models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PostTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "is_review_tag",
                    models.BooleanField(
                        default=False,
                        help_text="\nA special tag, shows the accumulative public opinion of the given topic, \nwith either positive '+' or negative '-' symbol and color. For a Software Tool it could be: \nPrivacy; Controversial; Mature; Expectation; FOSS, etc. \nThey're mostly defined the Django admins.\n",
                    ),
                ),
                (
                    "is_important",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="\nA highly informative PostTag - shown before other tags with a visual icon \n(eg macOS, Windows, TypeScript).\nAnd helps users to easily identify tools that work on their OS or tool. \nA Post author could set it to place the Tag at the start of other tags.\n",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PostTagVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_vote_positive", models.BooleanField(blank=True, null=True)),
                ("is_changed_my_mind", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="PostToolStatsGithub",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("stars", models.IntegerField()),
                ("kloc", models.IntegerField(blank=True, null=True)),
                ("forks", models.IntegerField(blank=True, null=True)),
                ("watchers", models.IntegerField(blank=True, null=True)),
                ("issues", models.IntegerField(blank=True, null=True)),
                ("pull_requests", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_vote_positive", models.BooleanField(blank=True, null=True)),
                ("is_changed_my_mind", models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ToolCompany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=511)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True, editable=False, populate_from="name", unique=True
                    ),
                ),
                ("description", neuronhub.apps.db.fields.MarkdownField(blank=True)),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.DomainNameValidator(accept_idna=False)
                        ],
                    ),
                ),
                ("country", django_countries.fields.CountryField(blank=True, max_length=2)),
                ("is_single_product", models.BooleanField(default=False)),
                ("crunchbase_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ToolCompanyOwnership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
