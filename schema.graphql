"""
Can only be resolved by authenticated users.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @IsAuthenticated repeatable on FIELD_DEFINITION

type DjangoModelType {
  pk: ID!
}

input IDBaseFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: ID

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [ID!]
}

type Mutation {
  logout: Boolean!
  update_user(data: UserTypeInput!): UserType! @IsAuthenticated
}

input OneToManyInput {
  set: ID
}

type Query {
  user_current: UserType
  tools: [ToolType!]!
  tool(pk: ID!): ToolType!
  tool_tags(filters: ToolTagFilter): [ToolTagType!]!
}

input StrFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: String

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [String!]

  """Case-insensitive exact match. Filter will be skipped on `null` value"""
  i_exact: String

  """
  Case-sensitive containment test. Filter will be skipped on `null` value
  """
  contains: String

  """
  Case-insensitive containment test. Filter will be skipped on `null` value
  """
  i_contains: String

  """Case-sensitive starts-with. Filter will be skipped on `null` value"""
  starts_with: String

  """Case-insensitive starts-with. Filter will be skipped on `null` value"""
  i_starts_with: String

  """Case-sensitive ends-with. Filter will be skipped on `null` value"""
  ends_with: String

  """Case-insensitive ends-with. Filter will be skipped on `null` value"""
  i_ends_with: String

  """
  Case-sensitive regular expression match. Filter will be skipped on `null` value
  """
  regex: String

  """
  Case-insensitive regular expression match. Filter will be skipped on `null` value
  """
  i_regex: String
}

input ToolTagFilter {
  id: IDBaseFilterLookup
  name: StrFilterLookup
  AND: ToolTagFilter
  OR: ToolTagFilter
  NOT: ToolTagFilter
  DISTINCT: Boolean
}

type ToolTagType {
  tools: [ToolType!]!
  tag_parent: ToolTagType!
  tag_children(filters: ToolTagFilter): [ToolTagType!]!
  author: UserType!
  id: ID!
  name: String!
  description: String!
}

type ToolType {
  slug: String!
  description: String
  alternatives: [ToolType!]!
  id: ID!
  name: String!
  domain: String!
  crunchbase_url: String!
  github_url: String!
}

type UserType {
  id: ID!
  email: String!
  first_name: String!
  last_name: String!
  org: DjangoModelType
}

input UserTypeInput {
  id: ID
  email: String
  first_name: String
  last_name: String
  org: OneToManyInput
}