"""
Can only be resolved by authenticated users.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @IsAuthenticated repeatable on FIELD_DEFINITION

directive @oneOf on INPUT_OBJECT

input BoolBaseFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: Boolean

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [Boolean!]
}

"""Date with time (isoformat)"""
scalar DateTime

type DjangoFileType {
  name: String!
  path: String!
  size: Int!
  url: String!
}

type DjangoImageType {
  name: String!
  path: String!
  size: Int!
  url: String!
  width: Int!
  height: Int!
}

input DjangoModelInput {
  id: ID!
}

type DjangoModelType {
  pk: ID!
}

input IDBaseFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: ID

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [ID!]
}

input LoginInput {
  username_or_email: String!
  password: String!
}

type LoginResponse {
  success: Boolean!
  user: UserType
  error: String
}

input ManyToManyInput {
  add: [ID!]
  remove: [ID!]
  set: [ID!]
}

input ManyToOneInput {
  add: [ID!]
  remove: [ID!]
  set: [ID!]
}

type Mutation {
  logout: Boolean!
  login(data: LoginInput!): LoginResponse!
  update_user(data: UserTypeInput!): UserType! @IsAuthenticated
  update_user_list(id: ID!, list_field_name: UserListName!, is_added: Boolean!): Boolean! @IsAuthenticated
  post_update(data: PostTypeInput!): PostType! @IsAuthenticated
  post_delete(data: DjangoModelInput!): PostType! @IsAuthenticated
  create_post(data: PostTypeInput!): PostType! @IsAuthenticated
  post_update_or_create(data: PostTypeInput!): PostType! @IsAuthenticated
  create_or_update_post_vote(id: ID!, is_vote_positive: Boolean, is_changed_my_mind: Boolean = null): Boolean! @IsAuthenticated
  post_tag_vote_create_or_update(post_id: ID!, tag_id: ID!, is_vote_positive: Boolean, comment: String = null): Boolean! @IsAuthenticated
  update_post_seen_status(id: ID!): Boolean! @IsAuthenticated
  test_db_stubs_repopulate: String!
}

enum Ordering {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

type PostCommentType implements PostTypeI {
  TYPE: PostTypeEnum!
  id: ID!
  author: UserType!
  seen_by_users: [DjangoModelType!]!
  parent: PostCommentType
  children: [PostTypeI!]!
  comments(filters: PostFilter): [PostCommentType!]!
  type: PostTypeEnum!
  title: String!
  content: String!
  content_private: String!
  image: DjangoImageType
  source: String!
  visibility: Visibility!
  visible_to_users: [UserType!]!
  visible_to_groups: [UserConnectionGroupType!]!
  recommended_to_users: [UserType!]!
  recommended_to_groups: [UserConnectionGroupType!]!
  tags(filters: PostTagFilter): [PostTagType!]!
  votes: [PostVoteType!]!
  tag_votes: [PostTagVoteType!]!
  company: DjangoModelType
  domain: String!
  url: String!
  crunchbase_url: String!
  github_url: String!
  created_at: DateTime!
  updated_at: DateTime!
}

input PostFilter {
  type: PostTypeEnumFilterLookup
  title: StrFilterLookup
  AND: PostFilter
  OR: PostFilter
  NOT: PostFilter
  DISTINCT: Boolean
}

input PostReviewOrder @oneOf {
  reviewed_at: Ordering
}

type PostReviewType implements PostTypeI {
  TYPE: PostTypeEnum!
  id: ID!
  author: UserType!
  seen_by_users: [DjangoModelType!]!
  parent: PostToolType!
  children: [PostTypeI!]!
  comments(filters: PostFilter): [PostCommentType!]!
  type: PostTypeEnum!
  title: String!
  content: String!
  content_private: String!
  image: DjangoImageType
  source: String!
  visibility: Visibility!
  visible_to_users: [UserType!]!
  visible_to_groups: [UserConnectionGroupType!]!
  recommended_to_users: [UserType!]!
  recommended_to_groups: [UserConnectionGroupType!]!
  tags(filters: PostTagFilter): [PostTagType!]!
  votes: [PostVoteType!]!
  tag_votes: [PostTagVoteType!]!
  company: DjangoModelType
  domain: String!
  url: String!
  crunchbase_url: String!
  github_url: String!
  created_at: DateTime!
  updated_at: DateTime!
  review_usage_status: UsageStatus
  review_rating: Int
  review_importance: Int
  review_experience_hours: Int
  review_tags(filters: PostTagFilter): [PostTagType!]!
  reviewed_at: DateTime!
  is_review_later: Boolean!
}

type PostSimpleType {
  id: ID!
}

input PostTagFilter {
  id: IDBaseFilterLookup
  name: StrFilterLookup
  description: StrFilterLookup
  is_review_tag: BoolBaseFilterLookup
  AND: PostTagFilter
  OR: PostTagFilter
  NOT: PostTagFilter
  DISTINCT: Boolean
}

type PostTagType {
  id: ID!
  posts(filters: PostFilter): [PostType!]!
  tag_parent: PostTagType
  tag_children(filters: PostTagFilter): [PostTagType!]!
  votes: [PostTagVoteType!]!
  author: UserType!
  name: String!
  description: String!
  is_important: Boolean
  is_review_tag: Boolean!
  label: String!
}

input PostTagTypeInput {
  name: String!
  id: ID
  comment: String
  is_review_tag: Boolean
  is_vote_positive: Boolean
  is_important: Boolean
  tag_parent: PostTagTypeInput
}

type PostTagVoteType {
  id: ID!
  post: PostSimpleType!
  tag: PostTagType!
  author: UserType!
  is_vote_positive: Boolean
  is_changed_my_mind: Boolean!
}

type PostToolType implements PostTypeI {
  TYPE: PostTypeEnum!
  id: ID!
  author: UserType!
  seen_by_users: [DjangoModelType!]!
  parent: PostTypeI
  children: [PostTypeI!]!
  comments(filters: PostFilter): [PostCommentType!]!
  type: PostTypeEnum!
  title: String!
  content: String!
  content_private: String!
  image: DjangoImageType
  source: String!
  visibility: Visibility!
  visible_to_users: [UserType!]!
  visible_to_groups: [UserConnectionGroupType!]!
  recommended_to_users: [UserType!]!
  recommended_to_groups: [UserConnectionGroupType!]!
  tags(filters: PostTagFilter): [PostTagType!]!
  votes: [PostVoteType!]!
  tag_votes: [PostTagVoteType!]!
  company: DjangoModelType
  domain: String!
  url: String!
  crunchbase_url: String!
  github_url: String!
  created_at: DateTime!
  updated_at: DateTime!
  tool_type: ToolType
  alternatives(filters: PostFilter): [PostToolType!]!
}

type PostType implements PostTypeI {
  TYPE: PostTypeEnum!
  id: ID!
  author: UserType!
  seen_by_users: [DjangoModelType!]!
  parent: PostTypeI
  children: [PostTypeI!]!
  comments(filters: PostFilter): [PostCommentType!]!
  type: PostTypeEnum!
  title: String!
  content: String!
  content_private: String!
  image: DjangoImageType
  source: String!
  visibility: Visibility!
  visible_to_users: [UserType!]!
  visible_to_groups: [UserConnectionGroupType!]!
  recommended_to_users: [UserType!]!
  recommended_to_groups: [UserConnectionGroupType!]!
  tags(filters: PostTagFilter): [PostTagType!]!
  votes: [PostVoteType!]!
  tag_votes: [PostTagVoteType!]!
  company: DjangoModelType
  domain: String!
  url: String!
  crunchbase_url: String!
  github_url: String!
  created_at: DateTime!
  updated_at: DateTime!
}

enum PostTypeEnum {
  Post
  Tool
  Review
  Comment
}

input PostTypeEnumFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: PostTypeEnum

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [PostTypeEnum!]

  """Case-insensitive exact match. Filter will be skipped on `null` value"""
  i_exact: PostTypeEnum

  """
  Case-sensitive containment test. Filter will be skipped on `null` value
  """
  contains: PostTypeEnum

  """
  Case-insensitive containment test. Filter will be skipped on `null` value
  """
  i_contains: PostTypeEnum

  """Case-sensitive starts-with. Filter will be skipped on `null` value"""
  starts_with: PostTypeEnum

  """Case-insensitive starts-with. Filter will be skipped on `null` value"""
  i_starts_with: PostTypeEnum

  """Case-sensitive ends-with. Filter will be skipped on `null` value"""
  ends_with: PostTypeEnum

  """Case-insensitive ends-with. Filter will be skipped on `null` value"""
  i_ends_with: PostTypeEnum

  """
  Case-sensitive regular expression match. Filter will be skipped on `null` value
  """
  regex: PostTypeEnum

  """
  Case-insensitive regular expression match. Filter will be skipped on `null` value
  """
  i_regex: PostTypeEnum
}

interface PostTypeI {
  TYPE: PostTypeEnum!
  id: ID!
  author: UserType!
  seen_by_users: [DjangoModelType!]!
  parent: PostTypeI
  children: [PostTypeI!]!
  comments(filters: PostFilter): [PostCommentType!]!
  type: PostTypeEnum!
  title: String!
  content: String!
  content_private: String!
  image: DjangoImageType
  source: String!
  visibility: Visibility!
  visible_to_users: [UserType!]!
  visible_to_groups: [UserConnectionGroupType!]!
  recommended_to_users: [UserType!]!
  recommended_to_groups: [UserConnectionGroupType!]!
  tags(filters: PostTagFilter): [PostTagType!]!
  votes: [PostVoteType!]!
  tag_votes: [PostTagVoteType!]!
  company: DjangoModelType
  domain: String!
  url: String!
  crunchbase_url: String!
  github_url: String!
  created_at: DateTime!
  updated_at: DateTime!
}

input PostTypeInput {
  id: ID
  type: PostTypeEnum
  parent: PostTypeInput
  alternatives: ManyToManyInput
  title: String
  content: String
  content_private: String
  visibility: Visibility
  visible_to_users: ManyToManyInput
  visible_to_groups: ManyToManyInput
  recommended_to_users: ManyToManyInput
  recommended_to_groups: ManyToManyInput
  tags: [PostTagTypeInput!]
  source: String
  image: Upload
  review_usage_status: UsageStatus
  review_rating: Int
  review_experience_hours: Int
  review_importance: Int
  review_tags: [PostTagTypeInput!]
  is_review_later: Boolean
  reviewed_at: DateTime
  tool_type: ToolType
  domain: String
  github_url: String
  crunchbase_url: String
  url: String
}

type PostVoteType {
  id: ID!
  post: PostTypeI!
  author: UserType!
  is_vote_positive: Boolean
  is_changed_my_mind: Boolean
}

type Query {
  user_current: UserType
  post(pk: ID!): PostType
  post_tool(pk: ID!): PostToolType
  post_review(pk: ID!): PostReviewType
  post_comment(pk: ID!): PostCommentType
  posts(filters: PostFilter): [PostType!]!
  post_tools(filters: PostFilter): [PostToolType!]!
  post_reviews(ordering: [PostReviewOrder!]! = []): [PostReviewType!]!
  post_comments(filters: PostFilter): [PostCommentType!]!
  tags(filters: PostTagFilter): [PostTagType!]!
}

input StrFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: String

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [String!]

  """Case-insensitive exact match. Filter will be skipped on `null` value"""
  i_exact: String

  """
  Case-sensitive containment test. Filter will be skipped on `null` value
  """
  contains: String

  """
  Case-insensitive containment test. Filter will be skipped on `null` value
  """
  i_contains: String

  """Case-sensitive starts-with. Filter will be skipped on `null` value"""
  starts_with: String

  """Case-insensitive starts-with. Filter will be skipped on `null` value"""
  i_starts_with: String

  """Case-sensitive ends-with. Filter will be skipped on `null` value"""
  ends_with: String

  """Case-insensitive ends-with. Filter will be skipped on `null` value"""
  i_ends_with: String

  """
  Case-sensitive regular expression match. Filter will be skipped on `null` value
  """
  regex: String

  """
  Case-insensitive regular expression match. Filter will be skipped on `null` value
  """
  i_regex: String
}

enum ToolType {
  Program
  Material
  SaaS
  App
  Product
  Other
}

scalar Upload

enum UsageStatus {
  USING
  USED
  WANT_TO_USE
  INTERESTED
  NOT_INTERESTED
}

type UserConnectionGroupType {
  id: ID!
  name: String!
  connections: [UserType!]!
}

enum UserListName {
  read_later
  library
}

type UserType {
  id: ID!
  username: String!
  first_name: String!
  last_name: String!
  email: String!
  connection_groups: [UserConnectionGroupType!]!
  avatar: DjangoFileType
  post_votes: [PostVoteType!]!
  post_tag_votes: [PostTagVoteType!]!
  read_later: [DjangoModelType!]!
  library: [DjangoModelType!]!
}

input UserTypeInput {
  username: String
  first_name: String
  last_name: String
  email: String
  connection_groups: ManyToOneInput
  avatar: Upload
  read_later: ManyToManyInput
  library: ManyToManyInput
}

enum Visibility {
  PRIVATE
  USERS_SELECTED
  CONNECTION_GROUPS_SELECTED
  CONNECTIONS
  SUBSCRIBERS_PAID
  SUBSCRIBERS
  INTERNAL
  PUBLIC
}