"""
Can only be resolved by authenticated users.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @IsAuthenticated repeatable on FIELD_DEFINITION

"""Date with time (isoformat)"""
scalar DateTime

"""Decimal (fixed-point)"""
scalar Decimal

type DjangoFileType {
  name: String!
  path: String!
  size: Int!
  url: String!
}

type DjangoModelType {
  pk: ID!
}

input IDBaseFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: ID

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [ID!]
}

input ManyToManyInput {
  add: [ID!]
  remove: [ID!]
  set: [ID!]
}

input ManyToOneInput {
  add: [ID!]
  remove: [ID!]
  set: [ID!]
}

type Mutation {
  logout: Boolean!
  update_user(data: UserTypeInput!): UserType! @IsAuthenticated
  toggle_user_review_list(review_pk: ID!, review_list_name: UserReviewListName!, is_added: Boolean!): Boolean! @IsAuthenticated
  create_review(data: ToolReviewTypeInput!): UserType! @IsAuthenticated
}

input OneToManyInput {
  set: ID
}

type Query {
  user_current: UserType
  me: UserType!
  tools(filters: ToolFilter): [ToolType!]!
  tool(pk: ID!): ToolType!
  tool_tags(filters: ToolTagFilter): [ToolTagType!]!
  tool_reviews: [ToolReviewType!]!
}

input StrFilterLookup {
  """Exact match. Filter will be skipped on `null` value"""
  exact: String

  """Assignment test. Filter will be skipped on `null` value"""
  is_null: Boolean

  """
  Exact match of items in a given list. Filter will be skipped on `null` value
  """
  in_list: [String!]

  """Case-insensitive exact match. Filter will be skipped on `null` value"""
  i_exact: String

  """
  Case-sensitive containment test. Filter will be skipped on `null` value
  """
  contains: String

  """
  Case-insensitive containment test. Filter will be skipped on `null` value
  """
  i_contains: String

  """Case-sensitive starts-with. Filter will be skipped on `null` value"""
  starts_with: String

  """Case-insensitive starts-with. Filter will be skipped on `null` value"""
  i_starts_with: String

  """Case-sensitive ends-with. Filter will be skipped on `null` value"""
  ends_with: String

  """Case-insensitive ends-with. Filter will be skipped on `null` value"""
  i_ends_with: String

  """
  Case-sensitive regular expression match. Filter will be skipped on `null` value
  """
  regex: String

  """
  Case-insensitive regular expression match. Filter will be skipped on `null` value
  """
  i_regex: String
}

input ToolAlternativeTypeInput {
  is_vote_positive: Boolean
  tool_alternative: OneToManyInput!
  comment: String
}

input ToolFilter {
  id: IDBaseFilterLookup
  name: StrFilterLookup
  description: String
  AND: ToolFilter
  OR: ToolFilter
  NOT: ToolFilter
  DISTINCT: Boolean
}

type ToolReviewType {
  id: ID!
  reviewed_at: DateTime!
  updated_at: DateTime!
  tool: ToolType!
  author: UserType!
  source: String!
  title: String!
  content: String!
  content_pros: String!
  content_cons: String!
  rating: Decimal
  importance: Decimal
  experience_hours: Int
  usage_status: UsageStatus
  visibility: Visibility!
  is_review_later: Boolean!
  is_private: Boolean!
  visible_to_users: [UserType!]!
  visible_to_groups: [UserConnectionGroupType!]!
  recommended_to_users: [UserType!]!
  recommended_to_groups: [UserConnectionGroupType!]!
}

input ToolReviewTypeInput {
  id: ID
  tool: ToolTypeInput!
  title: String
  content: String
  content_private: String
  usage_status: UsageStatus
  source: String
  reviewed_at: DateTime
  rating: Decimal
  importance: Decimal
  visibility: Visibility
  visible_to_users: ManyToManyInput
  visible_to_groups: ManyToManyInput
  recommended_to_users: ManyToManyInput
  recommended_to_groups: ManyToManyInput
  is_review_later: Boolean
  tags: [ToolTagTypeInput!]
}

input ToolTagFilter {
  id: IDBaseFilterLookup
  name: StrFilterLookup
  description: StrFilterLookup
  AND: ToolTagFilter
  OR: ToolTagFilter
  NOT: ToolTagFilter
  DISTINCT: Boolean
}

type ToolTagType {
  id: ID!
  name: String!
  description: String!
  is_important: Boolean!
  tools(filters: ToolFilter): [ToolType!]!
  tag_parent: ToolTagType!
  tag_children(filters: ToolTagFilter): [ToolTagType!]!
  author: UserType!
  votes: [ToolTagVoteType!]!
}

input ToolTagTypeInput {
  id: ID
  name: String!
  description: String
  comment: String
  is_vote_positive: Boolean
}

type ToolTagVoteType {
  id: ID!
  is_vote_positive: Boolean
  author: UserType!
}

type ToolType {
  id: ID!
  slug: String
  name: String!
  crunchbase_url: String!
  github_url: String!
  description: String
  alternatives(filters: ToolFilter): [ToolType!]!
  tags(filters: ToolTagFilter): [ToolTagType!]!
}

input ToolTypeInput {
  id: ID
  name: String!
  type: String!
  description: String
  github_url: String
  crunchbase_url: String
  alternatives: [ToolAlternativeTypeInput!]
}

scalar Upload

enum UsageStatus {
  USING
  USED
  WANT_TO_USE
  INTERESTED
  NOT_INTERESTED
}

type UserConnectionGroupType {
  id: ID!
  name: String!
  connections: [UserType!]!
}

enum UserReviewListName {
  REVIEWS_READ_LATER
  REVIEWS_LIBRARY
}

type UserType {
  id: ID!
  first_name: String!
  last_name: String!
  name: String!
  email: String!
  connection_groups: [UserConnectionGroupType!]!
  avatar: DjangoFileType
  reviews_read_later: [DjangoModelType!]!
  reviews_library: [DjangoModelType!]!
}

input UserTypeInput {
  id: ID
  first_name: String
  last_name: String
  name: String!
  email: String
  connection_groups: ManyToOneInput
  avatar: Upload
  reviews_read_later: ManyToManyInput
  reviews_library: ManyToManyInput
}

enum Visibility {
  PRIVATE
  CONNECTION_GROUPS
  CONNECTIONS
  INTERNAL
  PUBLIC
}