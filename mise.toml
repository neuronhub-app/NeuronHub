[tools]
    bun = "latest"
    uv = "latest"
    biome = "latest"

[settings]
    python.uv_venv_auto = true

[task_config]
    includes = [
        "devops/install-deps.mise.toml",
        "devops/upgrade-deps.mise.toml",
        "devops/claude.mise.toml",
        "devops/coder/docker.mise.toml",
        "client/e2e/e2e.mise.toml",
    ]

[env]
    SERVER_PORT = 8000
    SERVER_PORT_E2E = 8001

    CLIENT_PORT = 3000
    CLIENT_PORT_E2E = 3001


[tasks."dev"]
    depends = ["dev:db", "dev:server", "dev:client"]

    [tasks."dev:server"]
        depends = "dev:db"
        dir = "server"
        run = "uv run manage.py runserver {{ get_env(name='SERVER_PORT') }}"

    [tasks."dev:client"]
        depends = "dev:db"
        dir = "client"
        run = "bun run react-router dev --host --port={{ get_env(name='CLIENT_PORT') }}"
        env.VITE_SERVER_URL = "http://localhost:{{ get_env(name='SERVER_PORT') }}"

    # todo refac-name: docker-services?
    [tasks."dev:db"]
        dir = "devops"
        run = """
        if [ "$GITHUB_ACTIONS" = "true" ]; then
            echo "In GitHub CI skipping Mise Task dev:db"
        else
            sudo docker compose up db s3 --detach
            sudo docker exec neuronhub-s3-1 mkdir -p /data/media
        fi
        """
        silent = true
    [tasks."dev:db-stop"]
        dir = "devops"
        run = "sudo docker compose down db s3"

    [tasks."dev:server:e2e"]
        depends = ["dev:db", "dev:db:setup-e2e"]
        dir = "server"
        run = [
            "mise django:migrate",
            "uv run manage.py runserver {{ get_env(name='SERVER_PORT_E2E') }}",
        ]
        env.SERVER_URL = "http://localhost:{{ get_env(name='SERVER_PORT_E2E') }}"
        env.E2E_TEST = "true"
        env.E2E_DB_NAME = "{{ get_env(name='E2E_DB_NAME', default='test_neuronhub_e2e') }}"

    [tasks."dev:client:e2e"]
        dir = "client"
        run = "bun run react-router dev --host --port={{ get_env(name='CLIENT_PORT_E2E') }}"
        env.VITE_SERVER_URL = "http://localhost:{{ get_env(name='SERVER_PORT_E2E') }}"

    [tasks."dev:e2e"]
        depends = ["dev:server:e2e", "dev:client:e2e"]


[tasks."test"]
    dir = "server"
    depends = "dev:db"
    run = [
        "mise run test:pytest",
        "mise run test:e2e",
    ]

    [tasks."test:pytest"]
        dir = "server"
        depends = "dev:db"
        run = "uv run pytest"
        alias = "pytest"

    [tasks."test:e2e"]
        dir = "client"
        run = "bun run playwright test --config=e2e/playwright.config.ts"
        alias = "e2e"
        env.VITE_SERVER_URL = "http://localhost:{{ get_env(name='SERVER_PORT_E2E') }}"
        env.E2E_DB_NAME = "{{ get_env(name='E2E_DB_NAME', default='test_neuronhub_e2e') }}" # duplicate with `dev:server:e2e`, as Playwright resets env when starts Mise from [[playwright.config.ts]]


[tasks."django:migrate"]
    dir = "server"
    run = "uv run manage.py migrate"

[tasks."django:makemigrations"]
    dir = "server"
    run = "uv run manage.py makemigrations"

[tasks."django:db-stubs-repopulate"]
    dir = "server"
    run = "uv run manage.py db_stubs_repopulate"


[tasks."typegen"]
    depends = "typegen:server"
    run = [
        "mise run typegen:client:graphql",
        "mise run typegen:client:react",
        "mise run typegen:client:chakra",
    ]
    description = "Strawberry → schema.graphql → TypeScript enums; and @chakra-ui"

    [tasks."typegen:server"]
        dir = "server"
        run = "uv run manage.py export_schema neuronhub.graphql --path=../schema.graphql"
        sources = ["neuronhub/**/*.py"]
        outputs = ["../schema.graphql"]

    [tasks."typegen:client:graphql"]
        dir = "client"
        run = [
            "bun run graphql-codegen --errors-only --silent --config src/codegen.ts",
            "bun run gql-tada generate output",
        ]
        sources = ["../schema.graphql"]
        outputs = ["graphql/**/*"]

    [tasks."typegen:client:react"]
        dir = "client"
        run = "bun run react-router typegen"
        sources = ["src/apps/**/index.tsx", "src/routes.ts"]
        outputs = [".react-router/**/*"]

    [tasks."typegen:client:chakra"]
        dir = "client"
        run = "bunx @chakra-ui/cli typegen src/theme/theme.ts"
        sources = ["src/theme/**/*.ts"]
        outputs = ["node_modules/@chakra-ui/react/dist/types/styled-system/generated/**/*"]


[tasks."format"]
    depends = ["format:server", "format:client"]

    [tasks."format:server"]
        dir = "server"
        run = "uv run ruff format"
        sources = ["neuronhub/**/*.py"]
        outputs = { auto = true }

    [tasks."format:client"]
        dir = "client"
        run = "bun run biome format --write"
        sources = ["src/**/*", "e2e/**/*"]
        outputs = { auto = true }

[tasks."lint"]
    depends = [
        "typegen --output=silent",
        "format --output=silent",
    ]
    run = [
        "mise lint:server",
        "mise lint:client",
    ]

    [tasks."lint:server"]
        dir = "server"
        run = "uv run mypy neuronhub"
        sources = ["neuronhub/**/*.py"]
        outputs = { auto = true }

    [tasks."lint:client"]
        dir = "client"
        run = [
            "bun run tsgo --noEmit --project tsconfig.quiet.json",
            "bun run biome lint --write --unsafe",
        ]
        sources = ["src/**/*", "e2e/**/*"]
        outputs = { auto = true }
